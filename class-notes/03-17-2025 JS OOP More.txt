
RECAP: 
    - Re-using your object w/ spread operator 

    const obj1 = {
        key1: 'value1', 
        key2: 'value2', 
    }; 

    const obj2 = {
        ...obj1, 
        newKey: 'newValue' 
    }

    - Reusing your object w/ Object.create(): 

     const obj1 = {
        key1: 'value1', 
        key2: 'value2', 
    }; 

   const obj2 = Object.create(obj1); 
   obj2.newKey = 'newValue'; 


1. Prototypes
   
    function Movie(title, duration, director) {
        this.title = title; 
        this.duration = duration; 
        this.director = director;
    }

    Movie.prototype.publish = function() {
        console.log('PUBLISH')
    }

    const movie1 = new Movie('Batman', 180, 'John Doe'); 
    const movie2 = new Movie('Lord of the Rings', 175, 'Jane Doe'); 

    movie1.publish(); 
    movie2.publish(); 

2. ES6 Classes 

    class Movie {
        constructor(title, duration, director) {
            this.title = title; 
             this.duration = duration; 
             this.director = director;
        }
        publish(){
            console.log('PUBLISH'); 
        }
    }

    const movie1 = new Movie('Batman', 180, 'John Doe'); 
    const movie2 = new Movie('Lord of the Rings', 175, 'Jane Doe'); 

    movie1.publish(); 
    movie2.publish(); 


Inheritance: 
    1. Prototypal Inheritance
        1.1 Individual Object Inheritance

              const obj1 = {
                  key1: 'value1', 
                 key2: 'value2', 
             }; 

            const obj2 = Object.create(obj1);  ==> obj2 inherits all the properties/methods of obj1
            obj2.newKey = 'newValue'; 

        1.2 Prototype Inheritance 
            
            function Book(author, title) {
                this.author = author
                this. title = title; 
            }

            Book.prototype.sell = function() {
                console.log('SELL'); 
            }

            function PLBook() {}
            PLBook.prototype = Object.create(Book.prototype); 

            const book1 = new PLBook(); 
            book1.sell(); 

    2. ES6 Classes 

        class Book {
            constructor(author, title) {
                this.author = author
                this. title = title; 
            }
            sell(){
                console.log('SELL'); 
            }
        }

        class PLBook extends Book {
            constructor(author, title, compiled) {
               super(author, title); 
               this.compiled = compiled; 
            }
        }

        const jsBook = new PLBook('John Doe', 'Intro to JS', false); 
        const tsBook = new PLBook('John Doe', 'Intro to TS', true); 

        jsBook.sell(); 
        tsBook.sell(); 


INHERITANCE RULES: 
    - Parent class can have multiple child classes 
    - Child classes can have ONLY ONE parent 
    - Child classes inherits properties/methods/constructors from parent classes 
    - Parent classes CAN NEVER access any of the properties/methods/constructors from child classes 

*** INTERVIEW QUESTION: What is constructor? *** 
It is a special function/method used to create instances/objects of the classes/prototypes 
     - It's ALWAYS used next to the "new" keyword to create an object
        - "new" keyword is used together w/ constructor --> to make an object 
    - Every class will have a default(zero-args) constructor --> if you do not create a custom one 
        - constructor() {}

*** INTERVIEW QUESTION: "this" vs. "super" keywords *** 
this --> referes to the current object 
super --> refers to the parent class object
this() --> it referes to current class constructor
super() --> itreferes to parent class constructor


templates = prototype/class/blueprint 
object = instance 

Class is a blueprint from which many objects/instances can be created
Instance/Object is instantiated from a class 

class A {
    // this one has 2 instance methods 
}

class B extends A {
    // has additional 3 instance methods 
}

class C extends B {
    // has additional 5 instance methods 
}

const c = new C(); // access to ALL 10 methods 
const a = new A(); // has access to only 2 methods 

*** INTERVIEW QUESTION: What is encapsulation and its benefits? *** 
    - It is making private properties for a class and providing public getters/setters 
    - Getters ==> are used to retrieve the private properties --> they are usually (ALMOST ALWAYS) return type methods 
    - Setters ==> are used to set/update the private properties --> they are usually void methods and take at least one arg/parameter 

    - Encapsulation increases data security (by get/set method). 
    - It can make some data readonly [get method/via getters] or write-only [set method/ via setters]

*** INTERVIEW QUESTION: What are the OOP principles? *** (usually asked by someone w/ Java or C# experience)
    - Inheritance for reusability ("extends" keyword) ==> where I inherit parent class properties/methods/constructors to child classes 
    - Encapsulation ==> making private properties and providing public getters/setters 
    - Abstraction ==> parent class will have abstract methods (methods w/ no body/implementation) and child class MUST implement these methods 
    - Polymorphism ==> one object being able to get many shapes 


Instance variable = properties = fields = states 

