 - So we can all kinds of loops to iterate through array objects 
 - Most common loops ==> for loops + for...of loops 
 - We also can use ==> array.forEach() to iterate through array elements 
    - built-in function that executes a provided ince for each ARRAY element 
    - DOES NOT return a new array + DOES NOT modify the original array 
    - commonly used for iteration + performing actions on each array element 
    - SYNTAX: 
        - array.forEach(callback(element, elementIndex, arr), thisValue); 
            - callback ==> callback function executes on each array element 
            - element ==> the current element being processed in the array 
            - index (optional) ==> the index of the current element [obviously arrays start at 0]
            - array (optional) ==> the array on which forEach() is called 
    - EX: 
        const arr = [1, 2, 3, 4, 5]; 

        arr.forEach(item) => {
            console.log(item); 
        }

        OR 

        const items = [12, 24, 36]; 
        const copy = []; 

        items.forEach(function (item)){
            copy.push(item); 
        }
        console.log(copy); 

- one of the most basic ways to iterate through an array ==> for loop 
- cleaner/more readable way ==> for...of loop 
- .forEach() method ==> higher order method that you call on an array 

Really useful array methods to remember: 
- map() ==> creates a new array by applying a function to each element of the original array 
    - skips empty elements and does NOT modify the original array 
    - SYNTAX: 
        - arr.map(element, index, aray)





Array Methods: 

High Order Method/Function: it is a method/function that takes another 
callback function as an argument/parameter 

Callback: it is a function/method passed as an argument to another function/ method

EX: sort((a, b) => a - b) OR sort((a, b) => b - a)

Functional Programming: 

forEach(callback)
map(callback) ==> returns a SAME size array --> creates a new array populared with the results of ccalling a provided function on every 
    element in the calling array 

filter(callback) ==> creates a shallow copy of a portion of a given array + creates a NEW array with array elements that pass a 
    test + FILTERS down the elements that are relevant to the condition and makes a whole new array with them 

** reduce(callback) ** 

some(callback) ==> tests whether at least one element in the array passes the test implemented by the provided function 
    - if it returns TRUE 
every(callback)
find(callback)
findIndex(callback)


filter: returns an array filtered with elements matching a condition (usually a smaller sized array)
map: returns a same size array based on requirements 